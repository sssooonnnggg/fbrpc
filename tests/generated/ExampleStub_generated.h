
//
// automatically generated by the fbrpc generator, do not modify
//

#pragma once


#include "interface/ssStub.h"
#include "core/ssBuffer.h"
#include "Example_generated.h"

using namespace fbrpc;

namespace ExampleNamespace 
{
    class ExampleStub : public sStub
    {
    public:
        ExampleStub(sFlatBufferRpcClient* client): sStub(client) {}
        static std::size_t serviceHash() { static auto hash = std::hash<std::string>{}("ExampleService"); return hash; }
        static std::size_t typeHash() { static auto hash = std::hash<std::string>{}("ExampleStub"); return hash; }
        std::size_t hash() const override { return typeHash(); }

        using HelloWorldResponseHandler = std::function<void(const HelloWorldResponse*)>;
        void helloWorld(flatbuffers::Offset<HelloWorldRequest> request, HelloWorldResponseHandler handler)
        {
            static auto apiHash = std::hash<std::string>{}("helloWorld");
            builder().Finish(request);
            call(serviceHash(), apiHash, sBuffer::clone(builder()), [handler](sBufferView buffer)
            	{
            		auto* response = flatbuffers::GetRoot<HelloWorldResponse>(buffer.data);
            		handler(response);
            	}
            );
            builder().Clear();
        }

        using DelayAddResponseHandler = std::function<void(const DelayAddResponse*)>;
        void delayAdd(flatbuffers::Offset<DelayAddRequest> request, DelayAddResponseHandler handler)
        {
            static auto apiHash = std::hash<std::string>{}("delayAdd");
            builder().Finish(request);
            call(serviceHash(), apiHash, sBuffer::clone(builder()), [handler](sBufferView buffer)
            	{
            		auto* response = flatbuffers::GetRoot<DelayAddResponse>(buffer.data);
            		handler(response);
            	}
            );
            builder().Clear();
        }

        using ObjectCreateEventHandler = std::function<void(const ObjectCreateEvent*)>;
        void subscribeObjectCreateEvent(flatbuffers::Offset<EventDataFilter> request, ObjectCreateEventHandler handler)
        {
            static auto apiHash = std::hash<std::string>{}("subscribeObjectCreateEvent");
            builder().Finish(request);
            call(serviceHash(), apiHash, sBuffer::clone(builder()), [handler](sBufferView buffer)
            	{
            		auto* response = flatbuffers::GetRoot<ObjectCreateEvent>(buffer.data);
            		handler(response);
            	}
            );
            builder().Clear();
        }
    };
}
