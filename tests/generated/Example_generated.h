// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_EXAMPLE_EXAMPLENAMESPACE_H_
#define FLATBUFFERS_GENERATED_EXAMPLE_EXAMPLENAMESPACE_H_

#include "flatbuffers/flatbuffers.h"

namespace ExampleNamespace {

struct HelloWorldRequest;
struct HelloWorldRequestBuilder;

struct HelloWorldResponse;
struct HelloWorldResponseBuilder;

struct DelayAddRequest;
struct DelayAddRequestBuilder;

struct DelayAddResponse;
struct DelayAddResponseBuilder;

struct EventDataFilter;
struct EventDataFilterBuilder;

struct ObjectCreateEvent;
struct ObjectCreateEventBuilder;

struct HelloWorldRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef HelloWorldRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           verifier.EndTable();
  }
};

struct HelloWorldRequestBuilder {
  typedef HelloWorldRequest Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(HelloWorldRequest::VT_NAME, name);
  }
  explicit HelloWorldRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<HelloWorldRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<HelloWorldRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<HelloWorldRequest> CreateHelloWorldRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0) {
  HelloWorldRequestBuilder builder_(_fbb);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<HelloWorldRequest> CreateHelloWorldRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return ExampleNamespace::CreateHelloWorldRequest(
      _fbb,
      name__);
}

struct HelloWorldResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef HelloWorldResponseBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MESSAGE = 4
  };
  const flatbuffers::String *message() const {
    return GetPointer<const flatbuffers::String *>(VT_MESSAGE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           verifier.VerifyString(message()) &&
           verifier.EndTable();
  }
};

struct HelloWorldResponseBuilder {
  typedef HelloWorldResponse Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_message(flatbuffers::Offset<flatbuffers::String> message) {
    fbb_.AddOffset(HelloWorldResponse::VT_MESSAGE, message);
  }
  explicit HelloWorldResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<HelloWorldResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<HelloWorldResponse>(end);
    return o;
  }
};

inline flatbuffers::Offset<HelloWorldResponse> CreateHelloWorldResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> message = 0) {
  HelloWorldResponseBuilder builder_(_fbb);
  builder_.add_message(message);
  return builder_.Finish();
}

inline flatbuffers::Offset<HelloWorldResponse> CreateHelloWorldResponseDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *message = nullptr) {
  auto message__ = message ? _fbb.CreateString(message) : 0;
  return ExampleNamespace::CreateHelloWorldResponse(
      _fbb,
      message__);
}

struct DelayAddRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef DelayAddRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_A = 4,
    VT_B = 6
  };
  double a() const {
    return GetField<double>(VT_A, 0.0);
  }
  double b() const {
    return GetField<double>(VT_B, 0.0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<double>(verifier, VT_A) &&
           VerifyField<double>(verifier, VT_B) &&
           verifier.EndTable();
  }
};

struct DelayAddRequestBuilder {
  typedef DelayAddRequest Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_a(double a) {
    fbb_.AddElement<double>(DelayAddRequest::VT_A, a, 0.0);
  }
  void add_b(double b) {
    fbb_.AddElement<double>(DelayAddRequest::VT_B, b, 0.0);
  }
  explicit DelayAddRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<DelayAddRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DelayAddRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<DelayAddRequest> CreateDelayAddRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    double a = 0.0,
    double b = 0.0) {
  DelayAddRequestBuilder builder_(_fbb);
  builder_.add_b(b);
  builder_.add_a(a);
  return builder_.Finish();
}

struct DelayAddResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef DelayAddResponseBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RESULT = 4
  };
  double result() const {
    return GetField<double>(VT_RESULT, 0.0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<double>(verifier, VT_RESULT) &&
           verifier.EndTable();
  }
};

struct DelayAddResponseBuilder {
  typedef DelayAddResponse Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_result(double result) {
    fbb_.AddElement<double>(DelayAddResponse::VT_RESULT, result, 0.0);
  }
  explicit DelayAddResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<DelayAddResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DelayAddResponse>(end);
    return o;
  }
};

inline flatbuffers::Offset<DelayAddResponse> CreateDelayAddResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    double result = 0.0) {
  DelayAddResponseBuilder builder_(_fbb);
  builder_.add_result(result);
  return builder_.Finish();
}

struct EventDataFilter FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef EventDataFilterBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MIN = 4
  };
  int32_t min() const {
    return GetField<int32_t>(VT_MIN, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_MIN) &&
           verifier.EndTable();
  }
};

struct EventDataFilterBuilder {
  typedef EventDataFilter Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_min(int32_t min) {
    fbb_.AddElement<int32_t>(EventDataFilter::VT_MIN, min, 0);
  }
  explicit EventDataFilterBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<EventDataFilter> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<EventDataFilter>(end);
    return o;
  }
};

inline flatbuffers::Offset<EventDataFilter> CreateEventDataFilter(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t min = 0) {
  EventDataFilterBuilder builder_(_fbb);
  builder_.add_min(min);
  return builder_.Finish();
}

struct ObjectCreateEvent FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ObjectCreateEventBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DATA = 4
  };
  int32_t data() const {
    return GetField<int32_t>(VT_DATA, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_DATA) &&
           verifier.EndTable();
  }
};

struct ObjectCreateEventBuilder {
  typedef ObjectCreateEvent Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_data(int32_t data) {
    fbb_.AddElement<int32_t>(ObjectCreateEvent::VT_DATA, data, 0);
  }
  explicit ObjectCreateEventBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ObjectCreateEvent> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ObjectCreateEvent>(end);
    return o;
  }
};

inline flatbuffers::Offset<ObjectCreateEvent> CreateObjectCreateEvent(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t data = 0) {
  ObjectCreateEventBuilder builder_(_fbb);
  builder_.add_data(data);
  return builder_.Finish();
}

}  // namespace ExampleNamespace

#endif  // FLATBUFFERS_GENERATED_EXAMPLE_EXAMPLENAMESPACE_H_
