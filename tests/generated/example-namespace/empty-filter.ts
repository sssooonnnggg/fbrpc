// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class EmptyFilter {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):EmptyFilter {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsEmptyFilter(bb:flatbuffers.ByteBuffer, obj?:EmptyFilter):EmptyFilter {
  return (obj || new EmptyFilter()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsEmptyFilter(bb:flatbuffers.ByteBuffer, obj?:EmptyFilter):EmptyFilter {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new EmptyFilter()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static startEmptyFilter(builder:flatbuffers.Builder) {
  builder.startObject(0);
}

static endEmptyFilter(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createEmptyFilter(builder:flatbuffers.Builder):flatbuffers.Offset {
  EmptyFilter.startEmptyFilter(builder);
  return EmptyFilter.endEmptyFilter(builder);
}

serialize():Uint8Array {
  return this.bb!.bytes();
}

static deserialize(buffer: Uint8Array):EmptyFilter {
  return EmptyFilter.getRootAsEmptyFilter(new flatbuffers.ByteBuffer(buffer))
}
}
