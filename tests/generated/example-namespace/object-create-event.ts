// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class ObjectCreateEvent {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):ObjectCreateEvent {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsObjectCreateEvent(bb:flatbuffers.ByteBuffer, obj?:ObjectCreateEvent):ObjectCreateEvent {
  return (obj || new ObjectCreateEvent()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsObjectCreateEvent(bb:flatbuffers.ByteBuffer, obj?:ObjectCreateEvent):ObjectCreateEvent {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ObjectCreateEvent()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

data():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startObjectCreateEvent(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addData(builder:flatbuffers.Builder, data:number) {
  builder.addFieldInt32(0, data, 0);
}

static endObjectCreateEvent(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createObjectCreateEvent(builder:flatbuffers.Builder, data:number):flatbuffers.Offset {
  ObjectCreateEvent.startObjectCreateEvent(builder);
  ObjectCreateEvent.addData(builder, data);
  return ObjectCreateEvent.endObjectCreateEvent(builder);
}

serialize():Uint8Array {
  return this.bb!.bytes();
}

static deserialize(buffer: Uint8Array):ObjectCreateEvent {
  return ObjectCreateEvent.getRootAsObjectCreateEvent(new flatbuffers.ByteBuffer(buffer))
}
}
