// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class ObjectCreate {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):ObjectCreate {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsObjectCreate(bb:flatbuffers.ByteBuffer, obj?:ObjectCreate):ObjectCreate {
  return (obj || new ObjectCreate()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsObjectCreate(bb:flatbuffers.ByteBuffer, obj?:ObjectCreate):ObjectCreate {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ObjectCreate()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

data():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startObjectCreate(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addData(builder:flatbuffers.Builder, data:number) {
  builder.addFieldInt32(0, data, 0);
}

static endObjectCreate(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createObjectCreate(builder:flatbuffers.Builder, data:number):flatbuffers.Offset {
  ObjectCreate.startObjectCreate(builder);
  ObjectCreate.addData(builder, data);
  return ObjectCreate.endObjectCreate(builder);
}

serialize():Uint8Array {
  return this.bb!.bytes();
}

static deserialize(buffer: Uint8Array):ObjectCreate {
  return ObjectCreate.getRootAsObjectCreate(new flatbuffers.ByteBuffer(buffer))
}
}
