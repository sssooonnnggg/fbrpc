// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class EventDataFilter {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):EventDataFilter {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsEventDataFilter(bb:flatbuffers.ByteBuffer, obj?:EventDataFilter):EventDataFilter {
  return (obj || new EventDataFilter()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsEventDataFilter(bb:flatbuffers.ByteBuffer, obj?:EventDataFilter):EventDataFilter {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new EventDataFilter()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

min():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startEventDataFilter(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addMin(builder:flatbuffers.Builder, min:number) {
  builder.addFieldInt32(0, min, 0);
}

static endEventDataFilter(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createEventDataFilter(builder:flatbuffers.Builder, min:number):flatbuffers.Offset {
  EventDataFilter.startEventDataFilter(builder);
  EventDataFilter.addMin(builder, min);
  return EventDataFilter.endEventDataFilter(builder);
}

serialize():Uint8Array {
  return this.bb!.bytes();
}

static deserialize(buffer: Uint8Array):EventDataFilter {
  return EventDataFilter.getRootAsEventDataFilter(new flatbuffers.ByteBuffer(buffer))
}
}
