// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class DelayAddRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):DelayAddRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDelayAddRequest(bb:flatbuffers.ByteBuffer, obj?:DelayAddRequest):DelayAddRequest {
  return (obj || new DelayAddRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDelayAddRequest(bb:flatbuffers.ByteBuffer, obj?:DelayAddRequest):DelayAddRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DelayAddRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

a():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

b():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

static startDelayAddRequest(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addA(builder:flatbuffers.Builder, a:number) {
  builder.addFieldFloat64(0, a, 0.0);
}

static addB(builder:flatbuffers.Builder, b:number) {
  builder.addFieldFloat64(1, b, 0.0);
}

static endDelayAddRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createDelayAddRequest(builder:flatbuffers.Builder, a:number, b:number):flatbuffers.Offset {
  DelayAddRequest.startDelayAddRequest(builder);
  DelayAddRequest.addA(builder, a);
  DelayAddRequest.addB(builder, b);
  return DelayAddRequest.endDelayAddRequest(builder);
}

serialize():Uint8Array {
  return this.bb!.bytes();
}

static deserialize(buffer: Uint8Array):DelayAddRequest {
  return DelayAddRequest.getRootAsDelayAddRequest(new flatbuffers.ByteBuffer(buffer))
}
}
