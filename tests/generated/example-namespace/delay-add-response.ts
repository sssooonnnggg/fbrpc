// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class DelayAddResponse {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):DelayAddResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDelayAddResponse(bb:flatbuffers.ByteBuffer, obj?:DelayAddResponse):DelayAddResponse {
  return (obj || new DelayAddResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDelayAddResponse(bb:flatbuffers.ByteBuffer, obj?:DelayAddResponse):DelayAddResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DelayAddResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

result():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

static startDelayAddResponse(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addResult(builder:flatbuffers.Builder, result:number) {
  builder.addFieldFloat64(0, result, 0.0);
}

static endDelayAddResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createDelayAddResponse(builder:flatbuffers.Builder, result:number):flatbuffers.Offset {
  DelayAddResponse.startDelayAddResponse(builder);
  DelayAddResponse.addResult(builder, result);
  return DelayAddResponse.endDelayAddResponse(builder);
}

serialize():Uint8Array {
  return this.bb!.bytes();
}

static deserialize(buffer: Uint8Array):DelayAddResponse {
  return DelayAddResponse.getRootAsDelayAddResponse(new flatbuffers.ByteBuffer(buffer))
}
}
