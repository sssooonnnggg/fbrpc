// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class Event1 {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):Event1 {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsEvent1(bb:flatbuffers.ByteBuffer, obj?:Event1):Event1 {
  return (obj || new Event1()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsEvent1(bb:flatbuffers.ByteBuffer, obj?:Event1):Event1 {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Event1()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

data():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startEvent1(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addData(builder:flatbuffers.Builder, data:number) {
  builder.addFieldInt32(0, data, 0);
}

static endEvent1(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createEvent1(builder:flatbuffers.Builder, data:number):flatbuffers.Offset {
  Event1.startEvent1(builder);
  Event1.addData(builder, data);
  return Event1.endEvent1(builder);
}

serialize():Uint8Array {
  return this.bb!.bytes();
}

static deserialize(buffer: Uint8Array):Event1 {
  return Event1.getRootAsEvent1(new flatbuffers.ByteBuffer(buffer))
}
}
