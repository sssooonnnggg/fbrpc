
//
// automatically generated by the fbrpc generator, do not modify
//

#pragma once


#include "core/ssPromise.h"
#include "interface/ssService.h"
#include "Example_generated.h"

using namespace fbrpc;

namespace ExampleNamespace 
{
    class ExampleService : public sService
    {
    public:
        std::string name() const override { return "ExampleService"; }
        virtual void helloWorld(const HelloWorldRequest* request, std::unique_ptr<sPromise<HelloWorldResponse>> response) = 0; 
        virtual void delayAdd(const DelayAddRequest* request, std::unique_ptr<sPromise<DelayAddResponse>> response) = 0; 
        virtual void subscribeObjectCreateEvent(const EventDataFilter* request, std::unique_ptr<sPromise<ObjectCreateEvent>> response) = 0; 

        void init() override
        {
            
            addApiWrapper(std::hash<std::string>{}("helloWorld"), [this](sBufferView buffer, sResponder responder)
            	{
            		auto* request = flatbuffers::GetRoot<HelloWorldRequest>(reinterpret_cast<const void*>(buffer.data));
            		auto promise = createPromise<HelloWorldResponse>();
            		sUniqueFunction<void()> sendResponse = [capturedPromise = promise.get(), capturedResponder = std::move(responder)]() mutable
            		{
            			capturedResponder(sBuffer::clone(capturedPromise->builder()));
            		};
            		promise->bind(std::move(sendResponse));
            		helloWorld(request, std::move(promise));
            	}
            );
            
            addApiWrapper(std::hash<std::string>{}("delayAdd"), [this](sBufferView buffer, sResponder responder)
            	{
            		auto* request = flatbuffers::GetRoot<DelayAddRequest>(reinterpret_cast<const void*>(buffer.data));
            		auto promise = createPromise<DelayAddResponse>();
            		sUniqueFunction<void()> sendResponse = [capturedPromise = promise.get(), capturedResponder = std::move(responder)]() mutable
            		{
            			capturedResponder(sBuffer::clone(capturedPromise->builder()));
            		};
            		promise->bind(std::move(sendResponse));
            		delayAdd(request, std::move(promise));
            	}
            );
            
            addApiWrapper(std::hash<std::string>{}("subscribeObjectCreateEvent"), [this](sBufferView buffer, sResponder responder)
            	{
            		auto* request = flatbuffers::GetRoot<EventDataFilter>(reinterpret_cast<const void*>(buffer.data));
            		auto promise = createPromise<ObjectCreateEvent>();
            		sUniqueFunction<void()> sendResponse = [capturedPromise = promise.get(), capturedResponder = std::move(responder)]() mutable
            		{
            			capturedResponder(sBuffer::clone(capturedPromise->builder()));
            		};
            		promise->bind(std::move(sendResponse));
            		subscribeObjectCreateEvent(request, std::move(promise));
            	}
            );
        }
    };
}
